generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String
  password        String
  restaurants     Restaurant[]      // A user can have multiple restaurants (owned by them)
  restaurantUsers RestaurantUser[]  // A user can have multiple roles in various restaurants
}

model Restaurant {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  ownerId         String            // Owner's userId
  owner           User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  restaurantUsers RestaurantUser[]  // A restaurant can have multiple users (staff, etc.)
  tables          Table[]           // A restaurant can have multiple tables
  roles           Role[]            // A restaurant can have multiple roles (e.g. Owner, Manager)
}

model Role {
  id               Int      @id @default(autoincrement())
  name             String   // Role name (e.g. Owner, Manager)
  canCreateRoles   Boolean
  canManageTables  Boolean
  canManageSlots   Boolean
  canManageStaff   Boolean
  restaurantId     Int
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  
  restaurantUsers  RestaurantUser[]  // Add the inverse relation here
}

model RestaurantUser {
  id           Int       @id @default(autoincrement())
  userId       String
  restaurantId Int
  roleId       Int

  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Table {
  id           Int         @id @default(autoincrement())
  restaurantId Int
  name         String
  capacity     Int

  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  bookings     Booking[]   // Each table can have multiple bookings
  timeSlots    TableTimeSlot[] // Each table can have multiple time slots for availability
}

model TableTimeSlot {
  id        Int      @id @default(autoincrement())
  tableId   Int
  date      DateTime // Normalized to midnight (YYYY-MM-DDT00:00:00Z)
  slotIndex Int      // 0â€“47 for 30-minute intervals in a day
  isOpen    Boolean  // Whether this table is available in this slot

  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, date, slotIndex]) // Prevent duplicate slots for the same table on the same date
}

model Booking {
  id            Int       @id @default(autoincrement())
  customerName  String
  customerPhone String?
  tableId       Int
  date          DateTime  // For easier querying (redundant but practical)
  slotIndex     Int       // Matches slot booked
  createdAt     DateTime  @default(now())  // Automatically set when the booking is created

  table         Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([date, slotIndex])  // Index for querying bookings by date and time slot
}
