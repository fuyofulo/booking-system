generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String
  password        String
  restaurants     Restaurant[] 
  restaurantUsers RestaurantUser[]
}

model Restaurant {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  ownerId         String 
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  restaurantUsers RestaurantUser[] 
  tables          Table[] 
  roles           Role[] 
  menus           Menu[] 
  dishes          Dish[] 
  Order           Order[]
}

model Role {
  id              Int        @id @default(autoincrement())
  name            String 
  canCreateRoles  Boolean    @default(false)
  canManageTables Boolean    @default(false)
  canManageSlots  Boolean    @default(false)
  canManageStaff  Boolean    @default(false)
  canManageMenu   Boolean    @default(false)
  canManageOrders Boolean    @default(false)
  restaurantId    Int
  restaurant      Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  restaurantUsers RestaurantUser[] 
}

model RestaurantUser {
  id           Int    @id @default(autoincrement())
  userId       String
  restaurantId Int
  roleId       Int

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model Table {
  id           Int    @id @default(autoincrement())
  restaurantId Int
  name         String
  capacity     Int

  restaurant Restaurant      @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  bookings   Booking[]  
  timeSlots  TableTimeSlot[] 
  Order      Order[]
}

model TableTimeSlot {
  id        Int      @id @default(autoincrement())
  tableId   Int
  date      DateTime 
  slotIndex Int 
  isOpen    Boolean 

  bookingId Int? 
  booking   Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@unique([tableId, date, slotIndex]) 
}

model Booking {
  id             Int             @id @default(autoincrement())
  customerName   String
  customerPhone  String?
  tableId        Int
  date           DateTime 
  slotIndices    Int[] 
  createdAt      DateTime        @default(now())
  orders         Order[] 
  tableTimeSlots TableTimeSlot[] 

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([date]) 
}

model Menu {
  id           Int     @id @default(autoincrement())
  name         String
  description  String?
  imageUrl     String?
  restaurantId Int

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  dishes     Dish[] 

  @@unique([restaurantId, name]) 
}

model Dish {
  id           Int     @id @default(autoincrement())
  name         String
  description  String?
  price        Decimal @db.Decimal(10, 2) 
  imageUrl     String?
  isAvailable  Boolean @default(true)
  calories     Int?
  isVegetarian Boolean @default(false)
  displayOrder Int     @default(0) 
  menuId       Int
  restaurantId Int

  menu       Menu        @relation(fields: [menuId], references: [id], onDelete: Cascade)
  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderItems OrderItem[] 

  @@index([menuId]) 
  @@index([restaurantId]) 
}

model Order {
  id           Int     @id @default(autoincrement())
  orderNumber  String  @unique 
  restaurantId Int
  tableId      Int 
  bookingId    Int? 
  customerName String?
  status       String 
  totalAmount  Decimal @db.Decimal(10, 2)
  notes        String?

  restaurant Restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table      Table       @relation(fields: [tableId], references: [id])
  booking    Booking?    @relation(fields: [bookingId], references: [id])
  items      OrderItem[]

  @@index([restaurantId])
  @@index([tableId])
  @@index([bookingId])
  @@index([status])
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  dishId    Int
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  status    String 

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  dish  Dish  @relation(fields: [dishId], references: [id])

  @@index([orderId])
  @@index([dishId])
}
